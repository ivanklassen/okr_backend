name: ci/cd pipeline 1

on:
  push:
    branches:
      - main
      - develop

jobs:
  build:
    runs-on: self-hosted

    steps:
    # Шаг 1: Клонируем репозиторий
    - name: Checkout code
      uses: actions/checkout@v2

    # Шаг 2: Устанавливаем .NET SDK
    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '8.0.x'  

    # Шаг 3: Восстанавливаем зависимости
    - name: Restore dependencies
      run: dotnet restore

    # Шаг 4: Компилируем приложение
    - name: Build application
      run: dotnet build --configuration Release --no-restore

    # Шаг 5: Публикуем приложение (создаем артефакты)
    - name: Publish application
      run: dotnet publish --configuration Release --no-build --output ./artifacts

    # Шаг 6: Устанавливаем инструмент dotnet-ef
    #- name: Install EF Core tools
    #  run: dotnet tool install --global dotnet-ef --version 9.0.x

    # Шаг 7: Генерируем SQL-скрипт миграций
    - name: Generate migrations SQL script
      run: |
        # Укажите путь к проекту, если он не в корне репозитория
        # pwd > /home/kok0.log
        # ls > /home/kok.log
        dotnet ef migrations script --output ./migrations.sql --idempotent #--project ./okr_backend/okr_backend

    # Шаг 8: Сохраняем артефакты для использования в следующем этапе
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: app-artifacts
        path: ./artifacts/
        retention-days: 1  # Артефакты будут храниться 1 день

    # Шаг 9: Сохраняем SQL-скрипт миграций как артефакт
    - name: Upload migrations SQL script
      uses: actions/upload-artifact@v4
      with:
        name: migrations-sql
        path: ./migrations.sql
        retention-days: 1

  migrate:
    runs-on: self-hosted
    needs: build

    steps:
    # Шаг 1: Скачиваем SQL-скрипт миграций
    - name: Download migrations SQL script
      uses: actions/download-artifact@v4
      with:
        name: migrations-sql
        path: ./migrations/

    # Шаг 2: Убеждаемся, что PostgreSQL запущен
    - name: Ensure PostgreSQL is running
      run: |
        sudo systemctl start postgresql
        sudo systemctl status postgresql

    # Шаг 3: Применяем миграции
    - name: Apply migrations
      env:
        DB_CONNECTION_STRING: ${{ secrets.DB_CONNECTION_STRING }}
      run: |
        psql "$DB_CONNECTION_STRING" -f ./migrations/migrations.sql

  deploy:
    runs-on: self-hosted
    needs: migrate

    steps:
    # Шаг 1: Скачиваем артефакты
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: app-artifacts
        path: ./artifacts/
        
    # Шаг 2: Деплой приложения
    - name: Deploy application
      env:
        DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
      run: |
        # Останавливаем службу
        sudo systemctl stop okr_backend

        # Копируем новые файлы в рабочую директорию
        mkdir -p $DEPLOY_PATH
        cp -r ./artifacts/* $DEPLOY_PATH

        # Запускаем службу
        sudo systemctl start okr_backend

        # Проверяем статус службы (опционально)
        # sudo systemctl status okr_backend